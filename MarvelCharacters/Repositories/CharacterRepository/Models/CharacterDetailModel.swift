struct CharacterDetailModel {
    let id: UInt
    let name: String
    let description: String?
    let imageURL: String?
    let comics: [CharacterDetailComic]?
    let availableComics: Int
    let series: [CharacterDetailSerie]?
    let availableSeries: Int
    let stories: [CharacterDetailStory]?
    let availableStories: Int
    
    // Receives the struct generated by the character detail service parser
    init?(characterDetailEntity: CharacterDetailEntity) {
        guard let id  = characterDetailEntity.id, let name = characterDetailEntity.name else {
            return nil
        }
        
        self.id = id
        self.name = name
        description = characterDetailEntity.description
        if let path = characterDetailEntity.thumbnail?.path,
            let extensionFile = characterDetailEntity.thumbnail?.extensionFile {
            imageURL = "\(path).\(extensionFile)".replacingOccurrences(of: "http", with: "https")
        } else {
            imageURL = nil
        }
        
        if let comics = characterDetailEntity.comics?.items {
            self.comics = comics.map {
                CharacterDetailComic(name: $0.name)
            }
            self.availableComics = characterDetailEntity.comics?.available ?? 0
        } else {
            self.comics = [CharacterDetailComic]()
            self.availableComics = 0
        }
        
        if let series = characterDetailEntity.series?.items {
            self.series = series.map {
                CharacterDetailSerie(name: $0.name)
            }
            self.availableSeries = characterDetailEntity.series?.available ?? 0
        } else {
            self.series = [CharacterDetailSerie]()
            self.availableSeries = 0
        }
        
        if let stories = characterDetailEntity.stories?.items {
            self.stories = stories.map {
                CharacterDetailStory(name: $0.name)
            }
            self.availableStories = characterDetailEntity.stories?.available ?? 0
        } else {
            self.stories = [CharacterDetailStory]()
            self.availableStories = 0
        }
    }
}

struct CharacterDetailComic {
    let name: String
}

struct CharacterDetailSerie {
    let name: String
}

struct CharacterDetailStory {
    let name: String
}
